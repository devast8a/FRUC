# Metadata
name: 'FANG'
author: 'devast8a'

################################################################################
document = WS? statement_+ WS? :: Document
    statement_ = statement ';'

################################################################################
# Types
type = identifier :: TypeSimple
type = type '<' arguments '>' :: TypeGeneric
    arguments = argument++','
    argument = type

################################################################################
# Statements ###################################################################
################################################################################
# Classes
statement class_definition = 'class' name body? :: ClassDefinition
    name = identifier
    body = start member+ end
        start = INDENT
        end = DEDENT

        member = field
        field = name ':' type :: ClassField

################################################################################

statement function_definition = 'def' name parameters? returnType? '->' body? :: Function
    body = block
    name = identifier
    parameters = '(' parameter**',' ')'

    returnType = ':' type

    parameter = name ':' type :: FunctionParameter
        name = identifier

statement assignment = assignable '=' expression :: Assignment
    assignable = expression

statement expression function_call = callable arguments :: CallExpression
    callable = identifier
    arguments = '(' argument**',' ')'
    argument = expression



statement = variable_definition
variable_definition = 'var' name ':' type :: VariableDefinition
    name = identifier



statement while = 'while' condition body? :: While
    condition = expression
    body = block

statement if = 'if' condition body? if_elif* if_else? :: If
    condition = expression
    body = block

if_elif = keyword condition body? :: IfElif
    condition = expression
    keyword = 'elif'
    body = block

if_else = 'else' body?
    body = block

################################################################################

expression integer = /[0-9]+/ :: IntegerDecimal

expression string = string_
    string_ single_quote = /'[^'\r\n]+'/ :: StringSimple
    string_ double_quote = /"[^"\r\n]+"/ :: StringSimple

expression identifier = /[a-zA-Z_][a-zA-Z_0-9]*/ :: Identifier


expression dot_index = expression '.' identifier :: DotIndex

################################################################################
block = start statement_+ end
    start = INDENT
    end = DEDENT
    statement_ = statement ';'

@root = document

@between = WS?

WS = /[ \t\n]+/
    ignore: @true

INDENT = %INDENT
    ignore: @true

DEDENT = %DEDENT
    ignore: @true
